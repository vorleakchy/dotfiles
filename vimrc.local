" Color scheme
syntax enable
set t_Co=256
set background=dark
colorscheme solarized

set lazyredraw     " Don't redraw the screen during macros
set re=1           " Use old regex engine because it's faster
set encoding=utf-8
set scrolloff=3    " Start scrolling three lines before the horizontal window border
set cursorline     " Highlight current line
set mouse=a
set clipboard=unnamed " copy paste to clipboard

" Searching
set hlsearch       " Highlight searches [use :noh to clear]
set ignorecase     " Searches are case insensitive
set smartcase      " Searches are case-sensitive if a capital is in term

" Don't load ctrlp
let g:loaded_ctrlp = 1

let g:fzf_files_options =
  \ '--reverse ' .
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
nnoremap <C-p> :Files<cr>
let $FZF_DEFAULT_COMMAND = 'ag -g "" --hidden'

let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let branch_files_options_develop = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD develop) ) | sort | uniq'}
command! BranchFiles call fzf#run(fzf#wrap('BranchFiles',
      \ extend(branch_files_options, { 'options': g:fzf_files_options }), 0))
command! BranchFilesDevelop call fzf#run(fzf#wrap('BranchFilesDevelop',
      \ extend(branch_files_options_develop, { 'options': g:fzf_files_options }), 0))
nnoremap <silent> <leader>gp :BranchFiles<cr>


nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>

function! s:all_help_files()
  return join(map(split(&runtimepath, ','), 'v:val ."\/doc\/tags"'), ' ')
endfunction
let full_help_cmd = "cat ". s:all_help_files() ." 2> /dev/null \| grep -i '^[a-z]' \| awk '{print $1}' \| sort"

nnoremap <silent> <leader>he :Helptags<cr>

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Set Syntastic to perform haml
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": ["haml", "scss", "sass"] }

" NerdTree
" File tree browser - backslash
map \ :NERDTreeToggle<CR>
" File tree browser showing current file - pipe (shift-backslash)
map \| :NERDTreeFind<CR>

" GitGutter, trade speed for accuracy
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" === deoplete ===
if has("nvim")
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_start_length = 1
end

" Override thoughtbot completion direction
inoremap <S-Tab> <C-P>

function! s:check_back_space()
  let col = col('.') - 1
  return !col || getline('.')[col - 1] !~ '\k'
endfunction

" Override thoughtbot tab wrapper to move in opposite direction
function! InsertTabWrapper()
  if s:check_back_space()
    return "\<Tab>"
  else
    return "\<C-n>"
  endif
endfunction

" vim-airline
let g:airline_powerline_fonts = 1

" === vim-markdown ===
let g:markdown_fenced_languages = ['html', 'ruby', 'bash=sh', 'javascript', 'css', 'sql', 'vim']

" === vim-marked ===
let g:marked_app = 'Markoff' " Use thoughtbot's Markoff for markdown previews on MacOS
